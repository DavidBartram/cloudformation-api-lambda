AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: AWS API Gateway with a Lambda Integration

Parameters:
  ApiName:
    Type: String
    Default: my-stats-api
    Description: name for the REST API

  ResourcePath:
    Type: String
    Default: submitstats
    Description: path for the API resource

  StageName:
    Type: String
    Default: v0
    Description: name for API Stage

  ValidatorName:
    Type: String
    Default: request-body-validator
    Description: name for API request validator

  ApiPolicyName:
    Type: String
    Default: my-stats-api-policy
    Description: name for API execution policy
  
  LambdaName:
    Type: String
    Default: my-stats-lambda
    Description: name for lambda function

  LambdaPolicyName:
    Type: String
    Default: my-stats-lambda-policy
    Description: name for lambda execution policy
  
  UserPolicyName:
    Type: String
    Default: my-stats-api-user-policy
    Description: name for API user policy
    

Resources:

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref ApiName

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: !Ref ResourcePath
      RestApiId: !Ref RestApi

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      RequestValidatorId: !Ref ApiRequestValidator
      RequestModels:
        application/json:
          !Ref RequestModel
      MethodResponses:
        - StatusCode: 200
      OperationName: 'lambda'
      ResourceId: !Ref ApiResource
      RestApiId: !Ref RestApi

  RequestModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref RestApi
      Schema: {"$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Stats",
      "type": "object",
      "properties": {
          "blue_sold": {
              "type": "string"
          },
          "red_sold": {
              "type": "string"
          },
          "green_sold": {
              "type": "string"
          },
          "location": {
              "type": "string"
          },
          "date": {
              "type": "string"
          }
      },
      "required": ["blue_sold", "red_sold", "green_sold", "date", "location"] }

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      Description: API Stage v0
      RestApiId: !Ref RestApi
      StageName: !Ref StageName
  
  ApiRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Ref ValidatorName
      RestApiId: !Ref RestApi
      ValidateRequestBody: True
      ValidateRequestParameters: False

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: PostMethod
    Properties:
      RestApiId: !Ref RestApi

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: !Ref ApiPolicyName
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: ./lambda_code/
      MemorySize: 128
      Timeout: 300
      Role:
        Fn::Join:
          - ''
          - - "arn:aws:iam::"
            - Ref: AWS::AccountId
            - ":role/"
            - Ref: LambdaFunctionRole


  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref LambdaPolicyName
      Roles:
        - !Ref LambdaFunctionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - "*"

  ApiUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows user to trigger the stats import API
      ManagedPolicyName: !Ref UserPolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - execute-api:Invoke
              - execute-api:ManageConnections
            Resource:
              - !Join ['',[!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:',!Ref RestApi, '*']]
